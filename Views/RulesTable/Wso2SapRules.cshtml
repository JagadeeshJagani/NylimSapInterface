
@{
    ViewBag.Title = "Rules Table";
}
@section featured {
}
<style scoped>
    .k-edit-form-container
    {
        width:845px !important;
    }    
</style>
<script type="text/javascript">
    function entityFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: '@Url.Action("GetWso2SapRulesEntity", "RulesTable")'
                }
            },
            optionLabel: "--Select Value--"
        });
    }      
    function deleteRule() {
        var myGrid = $('#grid').data("kendoGrid");        
        if (myGrid.select().length == 0) {
            alert("Select record to be removed!");
            return false;
        }
        myGrid.removeRow(myGrid.select());
    }
    function dataBound(e) {
        $("#grid").off("click", ".k-grid-Delete", deleteRule);
        $("#grid").on("click", ".k-grid-Delete", deleteRule);
    }
    function onRequestEnd(e) {
        if (e.type == "update" && !e.response.errors) {
            common.showSuccessMsgSlide("Wso2Sap Rule Updated Successfully!");
            $("#grid").data("kendoGrid").dataSource.read(getSelectedInterface());
        }
        if (e.type == "create" && !e.response.errors) {
            common.showSuccessMsgSlide("Wso2Sap Rule Created Successfully!");
            $("#grid").data("kendoGrid").dataSource.read(getSelectedInterface());
        }
        if (e.type == "destroy" && !e.response.errors) {
            common.showSuccessMsgSlide("Wso2Sap Rule Removed Successfully!");
            $("#grid").data("kendoGrid").dataSource.read(getSelectedInterface());
        }
    }
</script>
<script id="fileTemplate" type="text/x-kendo-template">
    <span class='k-progress'></span>
    <div class='file-wrapper'>        
        <h6 class='file-heading file-name-heading'>Name: #=name#</h6>        
        <button type='button' id='btnUploadFile' class='k-upload-action'></button>
    </div>
</script>
<div id="gridcontentwrapper">
            <table style="display:none">   <tr>         
                            <td style="width:300px;">   
            @(Html.Kendo().Upload()
            .Name("rulesTableUpload")
            .Events(e => e.Upload("common.onUpload").Success("common.onUploadSuccess").Error("common.onUploadError"))
            //.TemplateId("fileTemplate")
            .Multiple(false)
            .Messages( m => m.Select("Select File..").StatusUploaded("File Successfully uploaded!"))
            .Async(a => a
                .Save("ImportRulesData", "RulesTable")
                .Remove("RemoveImportedRulesData", "RulesTable")
                .AutoUpload(false)
            )

            )
            </td>
            <td>
            <input type="checkbox" id="clearAllData" name="clearAllData" title="Clear all data prior import"
                        checked="checked" value="Clear All Data"></input><label for="clearAllData"
                            style="display: inline-block;">&nbsp;Clear All Data</label>
                            </td>
            </tr>
            </table>
           

@(Html.Kendo().Grid<NylimSapInterface.Model.Wso2SapRules>()
        .Name("grid")
    .Groupable()    
    .Resizable(resize => resize.Columns(true))
    .Scrollable(scrollable => scrollable.Virtual(true))
    .Sortable()    
    .Editable(e => e.Mode(GridEditMode.PopUp).TemplateName("Wso2SapRuleTemplate"))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Filterable(filterable => filterable
                .Extra(false)
                .Operators(operators => operators
                    .ForString(str => str.Clear()
                        .StartsWith("Starts with")
                        .IsEqualTo("Is equal to")
                        .IsNotEqualTo("Is not equal to")
                    ))
            ) 
    .Columns(columns =>
    {
        columns.Bound(p => p.Entity).Groupable(true).Title("Entity").Width(80).Filterable(filterable => filterable.UI("entityFilter"));
        columns.Bound(p => p.Subsystem).Title("Subsystem").Width(100);
        columns.Bound(p => p.Identification).Format("{0:MM/dd/yyyy}").Title("Identification").Width(110);
        columns.Bound(p => p.PostDate).Format("{0:MM/dd/yyyy}").Groupable(true).Title("Post Date").Width(90);
        columns.Bound(p => p.JournalDate).Format("{0:MM/dd/yyyy}").Groupable(true).Title("Journal Date").Width(100);
        columns.Bound(p => p.CostCenter).Title("Cost Center").Width(120);
        columns.Bound(p => p.StateCode).Title("State Code").Width(100);
        columns.Bound(p => p.InvestmentDivision).Title("Investment Division").Width(130);
        columns.Bound(p => p.ProfitCenter).Title("Profit Center").Width(120);
        columns.Bound(p => p.InsuranceDesignationSeries).Width(180);
        columns.Bound(p => p.TaxIndicator).Width(120);
        columns.Bound(p => p.IntOrderCd).Width(100);
        columns.Bound(p => p.WsoLedger).Width(180);
        columns.Bound(p => p.ExplanationOfTransaction).Width(300).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.PortfolioName).Width(250).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.AssetClass).Width(190);
        columns.Bound(p => p.TrancashName).Width(280).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.IssuerName).Width(280).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.CreditDebit1).Width(100);
        columns.Bound(p => p.Scale).Width(80);
        columns.Bound(p => p.Account).Width(120);
        columns.Bound(p => p.AccountName).Width(300).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.CreditDebit2).Width(100);
        columns.Bound(p => p.OffsetAcct).Width(100);
        columns.Bound(p => p.OffsetAcctName).Width(300).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.SapDescription).Width(280).HtmlAttributes(new { @style = "white-space: nowrap; text-overflow: ellipsis;", @value = "bar" });
        columns.Bound(p => p.CompanyCode).Width(110);
        columns.Bound(p => p.Tab).Width(90);
        columns.Bound(p => p.Rownum).Width(80);
        columns.Bound(p => p.DistributionChannelCode).Title("Distribution Channel Code").Width(155);
        columns.Bound(p => p.LedgerGroupCode).Title("Ledger Group Code").Width(135);
        columns.Bound(p => p.GLDocumentType).Title("GL Document Type").Width(135);
        columns.Bound(p => p.PremiumLoadType).Title("Premium Load Type").Width(135);
        columns.Bound(p => p.PolicyRiderType).Title("Policy Rider Type").Width(135);
        columns.Bound(p => p.SeparateAccountSeriesCode).Title("Separate Account Series Code").Width(175);
        columns.Bound(p => p.SourceProductCode).Title("Source Product Code").Width(145);
        columns.Bound(p => p.TradePartnerCode).Title("Trade Partner Coder").Width(190);
        columns.Bound(p => p.SourceInvestmentDivisionCode).Title("Investment Division Code").Width(190);
        columns.Bound(p => p.ProductCode).Title("Product Code").Width(100);
        columns.Bound(p => p.SubProductCode).Title("Sub Product Code").Width(120);      
    })
    .ToolBar(toolbar =>
    {
        //toolbar.Create().Text("Create Rule");
        //toolbar.Custom().Text("Delete").Name("Delete").Url("#");
        toolbar.Template(
            @<text>
                    <a class="k-button k-button-icontext k-grid-add" href="/SapGuiInterface/RulesTable/GetRulesTable?grid-mode=insert"><span class="k-icon k-add"></span>Create Rule</a>
                    <a class="k-button k-button-icontext k-grid-Delete" href="#"><span></span>Delete</a>
                     <a class="k-button k-button-icontext k-grid-Export" href='#'>
                        <span>
                        </span>
                        <span class=" k-icon k-grid-export-image"/>Export
                    </a>  
                </text>);
        })
        
   @* .ToolBar(toolbar =>
    {
        toolbar.Create().Text("Create Rule");
        toolbar.Custom().Text("Delete").Name("Delete").Url("#");
        toolbar.Template(@<text><a class="k-button k-button-icontext k-grid-export" href='@Url.Action("Wso2SapRulesToExcel", "RulesTable")'>
                        <span></span><span class=" k-icon k-grid-export-image"/>Export </a></text>);
    })*@
    .DataSource(dataSource => dataSource
        .Ajax()        
        .PageSize(45)
        .ServerOperation(false)
        .Model(m => m.Id("Rownum"))
        .Events(e => e.RequestEnd("onRequestEnd"))
        .Create(create => create.Action("SaveWso2SapRules", "RulesTable"))
        .Update(update => update.Action("UpdateWso2SapRules", "RulesTable"))
        .Destroy(destroy => destroy.Action("DeleteWso2SapRules", "RulesTable"))
        .Read(read => read.Action("GetRulesTable", "RulesTable").Data("getSelectedInterface"))
    )
)
</div>
<script type="text/javascript">    
    var securityModel = common.permissionSet;
    if (securityModel.HasWSO2SAP_EDIT_RULE_Access) {
        $('#grid').data("kendoGrid").element.delegate("tbody>tr", "dblclick", function () {
            $('#grid').data("kendoGrid").editRow($(this));
        });
    }

    $("#grid").off("click", ".k-grid-Delete", deleteRule);
    $("#grid").on("click", ".k-grid-Delete", deleteRule);
    $("#grid").off("click", ".k-grid-Export", common.exportToExcel);
    $("#grid").on("click", ".k-grid-Export", common.exportToExcel);
    var test = $('#grid').data("kendoGrid").table.kendoTooltip({
        filter: "td[value=bar]",
        content: function (e) {
            var target = e.target;
            return $(target).text();
        },
        position: "top",
        width: 100
    }).data("kendoTooltip");
    $(document).ready(function () {        
        var securityModel = common.permissionSet;
        if (securityModel.HasWSO2SAP_INT_Access || securityModel.HasWSO2SAP_EDIT_RULE_Access) {
            if (securityModel.HasWSO2SAP_EDIT_RULE_Access) {
                $('#grid').find('.k-toolbar .k-button').prop("disabled", false);
                $(".k-upload-button").prop("disabled", false);
            }
            else {
                $('#grid').find('.k-toolbar .k-button').prop("disabled", true);
                $(".k-upload-button").prop("disabled", true);
            }
        }
        else {
            //Select PanelBar Item..
            var panelBar = $("#panelbar").kendoPanelBar().data("kendoPanelBar");
            var rootItem = panelBar.element.children("li").eq(0).find(".k-group > .k-item").eq(2);
            rootItem.find("span").trigger("click");
        }
    });
</script>