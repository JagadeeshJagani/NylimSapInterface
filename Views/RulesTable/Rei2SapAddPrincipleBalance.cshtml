@{
    ViewBag.Title = "Add ProfitCenter WriteDown";
}
@section featured {
}
<script type="text/javascript">
    function onRequestEnd(e) {
        if (e.type == "create" && !e.response.errors) {
            common.showSuccessMsgSlide("Rei2Sap Principle balance Added Successfully!");
            $("#principlegrid").data("kendoGrid").dataSource.read();
        }
        else if (e.type == "update" && !e.response.errors) {
            common.showSuccessMsgSlide("Rei2Sap Principle balance Updated Successfully!");
            $("#principlegrid").data("kendoGrid").dataSource.read();
        }
    }

    function refreshGridData() {
            $("#principlegrid").data("kendoGrid").dataSource.read();
    }


    $(document).ready(function () {
        if (common.permissionSet.length > 0) {
            common.initLoad(common.permissionSet);
        }
    });

    function onEdit(e) {
        var kendoWindow = e.container.data("kendoWindow");

        if (e.model.isNew()) {
            //set options using the setOptions method
            kendoWindow.setOptions({
                title: "New record!"
            });
        } else {
            //set options using the setOptions method
            kendoWindow.setOptions({
                title: "Old record!"
            });
        }
        if (e.model.isNew() == false) {
            var dropDown = $("#Category").data("kendoComboBox");
            dropDown.enable(false);
            var dropDown1 = $("#Participant").data("kendoComboBox");
            dropDown1.enable(false);
            var dropDown2 = $("#Portfolio").data("kendoComboBox");
            dropDown2.enable(false);
        }
    }
</script>
<div id="contentContainer">
 
    @(Html.Kendo().Grid<NylimSapInterface.Model.Rei2SapPrincipleBalance>()
    .Name("principlegrid")
    .Groupable()
    .Resizable(resize => resize.Columns(true))
    .Events(e => e.Edit("onEdit"))
    .Editable(e => e.Mode(GridEditMode.PopUp).TemplateName("Rei2SapAddPrincipleBalanceTemplate"))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Filterable()
    .Columns(columns =>
    {
        columns.Bound(p => p.Category).Groupable(false).Title("Category").Width(80);
        columns.Bound(p => p.Participant).Title("Participant").Width(110);
        columns.Bound(p => p.Portfolio).Title("Portfolio").Width(110);
        columns.Bound(p => p.PrincipalBalanceWriteDown).Title("PrincipalBalanceWriteDown").Width(110);
    })
     .ToolBar(toolbar =>
    {
        toolbar.Template(
            @<text>
                    <a class="k-button k-button-icontext k-grid-add"><span class="k-icon k-add"></span>Add ProfitCenter</a>
                      <a class="k-button k-button-icontext k-grid-Export" href='#'>
                        <span>
                        </span>
                        <span class=" k-icon k-grid-export-image"/>Export
                    </a>
                    <a class="k-button k-button-icontext k-grid-Refresh"
                    href ="#"><span /><span class=" k-icon k-i-refresh" />
                </a>
            </text>);
        })
    .DataSource(dataSource => dataSource
                 .Ajax()
                         .Model(m =>
                         {
                             m.Id("Category");

                         })
        //.PageSize(60)
        .ServerOperation(false)
        .Events(e => e.RequestEnd("onRequestEnd"))
        .Create(update => update.Action("SaveRei2SapPrincipleBalance", "RulesTable"))
        .Update(update => update.Action("UpdateRei2SapPrincipleBalance", "RulesTable"))
        .Read(read => read.Action("GetReservesprincipalbalance", "RulesTable"))

                        .Destroy(destroy => destroy.Action("EditingCustomValidation_Cancel", "principlegrid"))
    )
)
</div>
<script type="text/javascript">
    var test = $('#principlegrid').data("kendoGrid").table.kendoTooltip({
        filter: "td[value=bar]",
        content: function (e) {
            var target = e.target;
            return $(target).text();
        },
        position: "top",
        width: 100
    }).data("kendoTooltip");
    var securityModel = common.permissionSet;
    if (securityModel.HasREI2SAP_EDIT_RULE_Access) {
        $('#principlegrid').data("kendoGrid").element.delegate("tbody>tr", "dblclick", function () {
            $('#principlegrid').data("kendoGrid").editRow($(this));
        });
    }
    $("#principlegrid").off("click", ".k-grid-Export", common.exportToExcel);
    $("#principlegrid").on("click", ".k-grid-Export", common.exportToExcel);
    $("#principlegrid").off("click", ".k-grid-Refresh", refreshGridData);
    $("#principlegrid").on("click", ".k-grid-Refresh", refreshGridData);
    $(document).ready(function () {
        var grid = $('#principlegrid').data('kendoGrid');
        (function ($, kendo) {
            var strParticipant = '';
            var cnt = 0;
            var strCategory = '';
            var strPortfolio = '';
            $.extend(true, kendo.ui.validator, {
                rules: { // custom rules
                    Categoryvalidation: function (input, params) {
                        //check for the rule attribute 
                        var container = $(input).closest("tr");
                        if ((input.is("[name='Category']")) || (input.is("[name='Participant']")) || (input.is("[name='Portfolio']"))) {
                            if (input.is("[name='Category']")) {
                                strCategory = container.find("input[name=Category]").prevObject.prevObject[0].value;
                            }
                            else if (input.is("[name='Participant']")) {
                                strParticipant = container.find("input[name=Participant]").prevObject.prevObject[0].value;
                            }
                            else if (input.is("[name='Portfolio']")) {
                                strPortfolio = container.find("input[name=Portfolio]").prevObject.prevObject[0].value;
                            }
                           
                            if (input.selector != ':input[data-bind="value:Category"]' && input.selector != ':input[data-bind="value:Participant"]' && input.selector != ':input[data-bind="value:Portfolio"]') {
                                if (input[0].name == 'Portfolio' && (strPortfolio == 'Select Portfolio' || strPortfolio == ''))
                               {
                                 return false;
                               }
                                else if ( input[0].name == 'Category' && (strCategory =='Select Category' || strCategory ==''))
                               {
                                 return false;
                               }
                             else if (input[0].name == 'Participant' && (strParticipant == 'Select Participant' || strParticipant == ''))
                               {
                                 return false;
                               }
                            }
                            return true;
                        }
                        else {
                            return true
                        }
                    }
                },
                messages: { //custom rules messages
                    Categoryvalidation: function (input) {
                        // return the message text
                        if (input[0].name == 'Portfolio') {
                            return "Please select Portfolio";
                        }
                        if (input[0].name == 'Category') {
                            return "Please select Category";
                        }
                        else if (input[0].name == 'Participant') {
                            return "Please select Participant";
                        }
                    }
                }
            });
        })(jQuery, kendo);

});
</script>
