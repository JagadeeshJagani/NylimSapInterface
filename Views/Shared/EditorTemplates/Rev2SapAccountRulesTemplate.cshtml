@model NylimSapInterface.Model.Rev2SapAccountRules

<div class="editor-label">
    <label for="GroupName" id="lblGroupName">Calculation Group</label>
</div>
<div class="editor-field">
  @(Html.Kendo().DropDownListFor(model => model.Calculation_Group)
                         .Name("Calculation_Group").HtmlAttributes(new { @style = "font-size:12px" })
                       .DataTextField("Calculation_Group")
                       .DataValueField("Calculation_Group")
                 .Events(e => e.Change("common.accountrulesGroupChange").DataBound("common.accountrulesGroupDataBound"))
                 .OptionLabel("Please Select")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetCalculationGroup", "RunInterface");
                    });
                })
            ) 
</div>


<div class="editor-label">
     <label for="JESubset" id="lblJESubset">JESubset</label>
</div>
<div class="editor-field">
  @(Html.Kendo().ComboBoxFor(model => model.Subset)
                        .Name("Subset")
                  .Placeholder("Please Select")
                        .DataTextField("Subset")
                        .DataValueField("Subset")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetAllSubSets", "RunInterface");
                       });
                   })
    )
</div>

<div class="editor-label">
   <label for="type_of_je" id="lblJEType">JE Type</label>
</div>
<div class="editor-field">
  @(Html.Kendo().DropDownListFor(model => model.JE_Type)
                        .Name("JE_Type")
                   .OptionLabel("Please Select")
                        .DataTextField("JE_Type")
                        .DataValueField("JE_Type")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapTypeofJE", "RunInterface");
                       });
                   })
         )
    @Html.ValidationMessageFor(model => model.JE_Type)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.DebitOrCredit)
</div>
<div class="editor-field">
    @(Html.Kendo().DropDownList()
              .Name("DebitOrCredit").HtmlAttributes(new { @style = "font-size:12px" })
                              .OptionLabel("--Please Select--")
                                .DataTextField("DebitOrCredit")
                                .DataValueField("DebitOrCredit")
                                 .DataSource(source =>
                                 {
                                     source.Read(read =>
                                     {
                                         read.Action("GetRev2SapDebCreditRules", "RulesTable");
                                     });
                                 })
            )
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.alloc_perc)
</div>
<div class="editor-field">
   @Html.EditorFor(model => model.alloc_perc, new { @class = "k-input", format = "# \\%" })
    @Html.ValidationMessageFor(model => model.alloc_perc)
</div>
<div class="editor-label">
   <label for="cost_center" id="lblCostCenter">Cost Center</label>
</div>
<div class="editor-field">
  @(Html.Kendo().ComboBoxFor(model => model.cost_center)
                        .Name("cost_center")
                          .Placeholder("--Please Select--")
                                                .DataTextField("cost_center")
                                                .DataValueField("cost_center")
                                    .Suggest(true)
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapCostCenter", "RunInterface");
                       });
                   })
         )
    @Html.ValidationMessageFor(model => model.cost_center)
</div>
<div class="editor-label">
            @Html.LabelFor(model => model.ProfitCenter)
        </div>
<div class="editor-field">
    @(Html.Kendo().ComboBoxFor(model => model.ProfitCenter)
                      .Name("ProfitCenter").HtmlAttributes(new { @style = "font-size:12px" })
                              .Placeholder("--Please Select--")
                              .DataTextField("ProfitCenter")
                              .DataValueField("ProfitCenter")
                              .Suggest(true)
                                 .DataSource(source =>
                                 {
                                     source.Read(read =>
                                     {
                                         read.Action("GetRev2SapProfitCenterRules", "RulesTable");
                                     });
                                 })
            )
            @Html.ValidationMessageFor(model => model.ProfitCenter)
 </div>

<div class="editor-label">
    @Html.LabelFor(model => model.Account)
</div>

<div class="editor-field">
   @(Html.Kendo().ComboBoxFor(model => model.Account)
                                 .Name("Account")
                         .DataTextField("Account")
                         .DataValueField("Account")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapAcountData", "RulesTable");
                       });
                   })
         )
@*@(Html.Kendo().IntegerTextBoxFor(model => model.Account)
      .HtmlAttributes(new { style = "width:100%" })
      .Spinners(true)
      .Format("#")
          )*@

</div>

<div class="editor-label">
    @Html.LabelFor(model => model.AccountName)
</div>
<div class="editor-field">
   @(Html.Kendo().ComboBoxFor(model => model.AccountName)
                         .Name("AccountName")
                         .DataTextField("AccountName")
                         .DataValueField("AccountName")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapAccountNameData", "RulesTable");
                       });
                   })
         )
@*@(Html.Kendo().IntegerTextBoxFor(model => model.Account)
      .HtmlAttributes(new { style = "width:100%" })
      .Spinners(true)
      .Format("#")
          )*@

</div>

<div class="editor-label">
    @Html.LabelFor(model => model.trading_partner)
</div>
<div class="editor-field">
   @(Html.Kendo().ComboBoxFor(model => model.trading_partner)
                                .Name("trading_partner")
                                .DataTextField("trading_partner")
                                .DataValueField("trading_partner")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapATradingPartnerData", "RulesTable");
                       });
                   })
         )

</div>

<div class="editor-label">
   <label for="entity">Entity</label>
</div>
<div class="editor-field">
  @(Html.Kendo().ComboBoxFor(model => model.entity)
                                       .Name("entity")
                               .DataTextField("entity")
                               .DataValueField("entity")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapEntity", "RulesTable");
                       });
                   })
         )
    @Html.ValidationMessageFor(model => model.entity)
</div>

<div class="editor-label">
    <label for="new_company_code">New Company Code</label>
</div>
<div class="editor-field">
 @(Html.Kendo().ComboBoxFor(model => model.new_company_code)
                                            .Name("new_company_code")
                                    .DataTextField("new_company_code")
                                    .DataValueField("new_company_code")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapNewCompCode", "RulesTable");
                       });
                   })
         )
    @Html.ValidationMessageFor(model => model.new_company_code)
</div>

<div class="editor-label">
    <label for="distribution_channel">Distribution Channel</label>
</div>
<div class="editor-field">
@(Html.Kendo().ComboBoxFor(model => model.distribution_channel)
                                                .Name("distribution_channel")
                                        .DataTextField("distribution_channel")
                                        .DataValueField("distribution_channel")
            .Filter("startswith")
                   .DataSource(source =>
                   {
                       source.Read(read =>
                       {
                           read.Action("GetRev2SapDistributionChannel", "RulesTable");
                       });
                   })
         )
    @Html.ValidationMessageFor(model => model.distribution_channel)
</div>
<script type="text/javascript">

//Sets up your optional label
$(document).ready(function () {
    $("#type_of_je").data("kendoComboBox").text("-- Select --");
})

//Does all the functionality
function onSelect(e) {
    var dataItem = this.dataItem(e.item);
    var ddl = $("#type_of_je").data("kendoComboBox");
    var cbs = document.getElementsByName("cb");
    var display;

    var list = [];
    for (var i = 0; i < cbs.length; i++) {
        if (cbs[i].checked) {
            list.push(cbs[i].value);
        }
    }

    if (list.length == 0) {
        display = "-- Select --";
    }
    else {
        display = list.join(", ");
    }

    ddl.text(display);
}
</script>
